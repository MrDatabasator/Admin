//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackupAdmin.ServerReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tbDaemon", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class tbDaemon : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DaemonNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PcNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RefreshRateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DaemonName {
            get {
                return this.DaemonNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DaemonNameField, value) != true)) {
                    this.DaemonNameField = value;
                    this.RaisePropertyChanged("DaemonName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastActive {
            get {
                return this.LastActiveField;
            }
            set {
                if ((this.LastActiveField.Equals(value) != true)) {
                    this.LastActiveField = value;
                    this.RaisePropertyChanged("LastActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PcName {
            get {
                return this.PcNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PcNameField, value) != true)) {
                    this.PcNameField = value;
                    this.RaisePropertyChanged("PcName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RefreshRate {
            get {
                return this.RefreshRateField;
            }
            set {
                if ((this.RefreshRateField.Equals(value) != true)) {
                    this.RefreshRateField = value;
                    this.RaisePropertyChanged("RefreshRate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tbDestination", Namespace="http://schemas.datacontract.org/2004/07/WcfService1", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class tbDestination : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FtpPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FtpServerAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FtpUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FullBackupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BackupAdmin.ServerReference.tbTask[] LTaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NetDestinationPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NetSourcePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkingDirectoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FtpPassword {
            get {
                return this.FtpPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.FtpPasswordField, value) != true)) {
                    this.FtpPasswordField = value;
                    this.RaisePropertyChanged("FtpPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FtpServerAddress {
            get {
                return this.FtpServerAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.FtpServerAddressField, value) != true)) {
                    this.FtpServerAddressField = value;
                    this.RaisePropertyChanged("FtpServerAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FtpUsername {
            get {
                return this.FtpUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.FtpUsernameField, value) != true)) {
                    this.FtpUsernameField = value;
                    this.RaisePropertyChanged("FtpUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FullBackup {
            get {
                return this.FullBackupField;
            }
            set {
                if ((this.FullBackupField.Equals(value) != true)) {
                    this.FullBackupField = value;
                    this.RaisePropertyChanged("FullBackup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BackupAdmin.ServerReference.tbTask[] LTask {
            get {
                return this.LTaskField;
            }
            set {
                if ((object.ReferenceEquals(this.LTaskField, value) != true)) {
                    this.LTaskField = value;
                    this.RaisePropertyChanged("LTask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetDestinationPath {
            get {
                return this.NetDestinationPathField;
            }
            set {
                if ((object.ReferenceEquals(this.NetDestinationPathField, value) != true)) {
                    this.NetDestinationPathField = value;
                    this.RaisePropertyChanged("NetDestinationPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetSourcePath {
            get {
                return this.NetSourcePathField;
            }
            set {
                if ((object.ReferenceEquals(this.NetSourcePathField, value) != true)) {
                    this.NetSourcePathField = value;
                    this.RaisePropertyChanged("NetSourcePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkingDirectory {
            get {
                return this.WorkingDirectoryField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkingDirectoryField, value) != true)) {
                    this.WorkingDirectoryField = value;
                    this.RaisePropertyChanged("WorkingDirectory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tbTask", Namespace="http://schemas.datacontract.org/2004/07/WcfService1", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class tbTask : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DaemonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KornExpressionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BackupAdmin.ServerReference.tbDestination[] LDestinationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastTaskCommitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskFinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaemonId {
            get {
                return this.DaemonIdField;
            }
            set {
                if ((this.DaemonIdField.Equals(value) != true)) {
                    this.DaemonIdField = value;
                    this.RaisePropertyChanged("DaemonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KornExpression {
            get {
                return this.KornExpressionField;
            }
            set {
                if ((object.ReferenceEquals(this.KornExpressionField, value) != true)) {
                    this.KornExpressionField = value;
                    this.RaisePropertyChanged("KornExpression");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BackupAdmin.ServerReference.tbDestination[] LDestination {
            get {
                return this.LDestinationField;
            }
            set {
                if ((object.ReferenceEquals(this.LDestinationField, value) != true)) {
                    this.LDestinationField = value;
                    this.RaisePropertyChanged("LDestination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastTaskCommit {
            get {
                return this.LastTaskCommitField;
            }
            set {
                if ((this.LastTaskCommitField.Equals(value) != true)) {
                    this.LastTaskCommitField = value;
                    this.RaisePropertyChanged("LastTaskCommit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskFinished {
            get {
                return this.TaskFinishedField;
            }
            set {
                if ((this.TaskFinishedField.Equals(value) != true)) {
                    this.TaskFinishedField = value;
                    this.RaisePropertyChanged("TaskFinished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName {
            get {
                return this.TaskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameField, value) != true)) {
                    this.TaskNameField = value;
                    this.RaisePropertyChanged("TaskName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="tbLog", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class tbLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DaemonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaemonId {
            get {
                return this.DaemonIdField;
            }
            set {
                if ((this.DaemonIdField.Equals(value) != true)) {
                    this.DaemonIdField = value;
                    this.RaisePropertyChanged("DaemonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadString", ReplyAction="http://tempuri.org/IService1/UploadStringResponse")]
        void UploadString(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadString", ReplyAction="http://tempuri.org/IService1/UploadStringResponse")]
        System.Threading.Tasks.Task UploadStringAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadDaemon", ReplyAction="http://tempuri.org/IService1/UploadDaemonResponse")]
        void UploadDaemon(BackupAdmin.ServerReference.tbDaemon o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadDaemon", ReplyAction="http://tempuri.org/IService1/UploadDaemonResponse")]
        System.Threading.Tasks.Task UploadDaemonAsync(BackupAdmin.ServerReference.tbDaemon o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadDestination", ReplyAction="http://tempuri.org/IService1/UploadDestinationResponse")]
        void UploadDestination(BackupAdmin.ServerReference.tbDestination d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadDestination", ReplyAction="http://tempuri.org/IService1/UploadDestinationResponse")]
        System.Threading.Tasks.Task UploadDestinationAsync(BackupAdmin.ServerReference.tbDestination d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadLog", ReplyAction="http://tempuri.org/IService1/UploadLogResponse")]
        void UploadLog(BackupAdmin.ServerReference.tbLog l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadLog", ReplyAction="http://tempuri.org/IService1/UploadLogResponse")]
        System.Threading.Tasks.Task UploadLogAsync(BackupAdmin.ServerReference.tbLog l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadTask", ReplyAction="http://tempuri.org/IService1/UploadTaskResponse")]
        void UploadTask(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadTask", ReplyAction="http://tempuri.org/IService1/UploadTaskResponse")]
        System.Threading.Tasks.Task UploadTaskAsync(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadDaemonReference", ReplyAction="http://tempuri.org/IService1/UploadDaemonReferenceResponse")]
        int UploadDaemonReference(BackupAdmin.ServerReference.tbDaemon o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadDaemonReference", ReplyAction="http://tempuri.org/IService1/UploadDaemonReferenceResponse")]
        System.Threading.Tasks.Task<int> UploadDaemonReferenceAsync(BackupAdmin.ServerReference.tbDaemon o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDaemonLastActive", ReplyAction="http://tempuri.org/IService1/UpdateDaemonLastActiveResponse")]
        void UpdateDaemonLastActive(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDaemonLastActive", ReplyAction="http://tempuri.org/IService1/UpdateDaemonLastActiveResponse")]
        System.Threading.Tasks.Task UpdateDaemonLastActiveAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckDeamonReference", ReplyAction="http://tempuri.org/IService1/CheckDeamonReferenceResponse")]
        bool CheckDeamonReference(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckDeamonReference", ReplyAction="http://tempuri.org/IService1/CheckDeamonReferenceResponse")]
        System.Threading.Tasks.Task<bool> CheckDeamonReferenceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DaemonReferenceOutdated", ReplyAction="http://tempuri.org/IService1/DaemonReferenceOutdatedResponse")]
        bool DaemonReferenceOutdated(int id, BackupAdmin.ServerReference.tbDaemon d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DaemonReferenceOutdated", ReplyAction="http://tempuri.org/IService1/DaemonReferenceOutdatedResponse")]
        System.Threading.Tasks.Task<bool> DaemonReferenceOutdatedAsync(int id, BackupAdmin.ServerReference.tbDaemon d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDeamonReferenceUpload", ReplyAction="http://tempuri.org/IService1/UpdateDeamonReferenceUploadResponse")]
        void UpdateDeamonReferenceUpload(BackupAdmin.ServerReference.tbDaemon d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDeamonReferenceUpload", ReplyAction="http://tempuri.org/IService1/UpdateDeamonReferenceUploadResponse")]
        System.Threading.Tasks.Task UpdateDeamonReferenceUploadAsync(BackupAdmin.ServerReference.tbDaemon d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDeamonReferenceGet", ReplyAction="http://tempuri.org/IService1/UpdateDeamonReferenceGetResponse")]
        BackupAdmin.ServerReference.tbDaemon UpdateDeamonReferenceGet(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateDeamonReferenceGet", ReplyAction="http://tempuri.org/IService1/UpdateDeamonReferenceGetResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon> UpdateDeamonReferenceGetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindDestinationByTaskId", ReplyAction="http://tempuri.org/IService1/FindDestinationByTaskIdResponse")]
        BackupAdmin.ServerReference.tbDestination[] FindDestinationByTaskId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindDestinationByTaskId", ReplyAction="http://tempuri.org/IService1/FindDestinationByTaskIdResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDestination[]> FindDestinationByTaskIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindTaskByDestinationId", ReplyAction="http://tempuri.org/IService1/FindTaskByDestinationIdResponse")]
        BackupAdmin.ServerReference.tbTask[] FindTaskByDestinationId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindTaskByDestinationId", ReplyAction="http://tempuri.org/IService1/FindTaskByDestinationIdResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbTask[]> FindTaskByDestinationIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExistDeamonTask", ReplyAction="http://tempuri.org/IService1/ExistDeamonTaskResponse")]
        bool ExistDeamonTask(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExistDeamonTask", ReplyAction="http://tempuri.org/IService1/ExistDeamonTaskResponse")]
        System.Threading.Tasks.Task<bool> ExistDeamonTaskAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDeamonTask", ReplyAction="http://tempuri.org/IService1/GetDeamonTaskResponse")]
        BackupAdmin.ServerReference.tbTask[] GetDeamonTask(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDeamonTask", ReplyAction="http://tempuri.org/IService1/GetDeamonTaskResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbTask[]> GetDeamonTaskAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NewLogMessage", ReplyAction="http://tempuri.org/IService1/NewLogMessageResponse")]
        void NewLogMessage(int DaemonId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/NewLogMessage", ReplyAction="http://tempuri.org/IService1/NewLogMessageResponse")]
        System.Threading.Tasks.Task NewLogMessageAsync(int DaemonId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTaskFinished", ReplyAction="http://tempuri.org/IService1/UpdateTaskFinishedResponse")]
        void UpdateTaskFinished(int id, bool finished);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTaskFinished", ReplyAction="http://tempuri.org/IService1/UpdateTaskFinishedResponse")]
        System.Threading.Tasks.Task UpdateTaskFinishedAsync(int id, bool finished);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTaskRefrence", ReplyAction="http://tempuri.org/IService1/UpdateTaskRefrenceResponse")]
        void UpdateTaskRefrence(int id, BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTaskRefrence", ReplyAction="http://tempuri.org/IService1/UpdateTaskRefrenceResponse")]
        System.Threading.Tasks.Task UpdateTaskRefrenceAsync(int id, BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTaskLastCommit", ReplyAction="http://tempuri.org/IService1/UpdateTaskLastCommitResponse")]
        void UpdateTaskLastCommit(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateTaskLastCommit", ReplyAction="http://tempuri.org/IService1/UpdateTaskLastCommitResponse")]
        System.Threading.Tasks.Task UpdateTaskLastCommitAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDestinations", ReplyAction="http://tempuri.org/IService1/GetAllDestinationsResponse")]
        BackupAdmin.ServerReference.tbDestination[] GetAllDestinations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDestinations", ReplyAction="http://tempuri.org/IService1/GetAllDestinationsResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDestination[]> GetAllDestinationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDaemons", ReplyAction="http://tempuri.org/IService1/GetAllDaemonsResponse")]
        BackupAdmin.ServerReference.tbDaemon[] GetAllDaemons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDaemons", ReplyAction="http://tempuri.org/IService1/GetAllDaemonsResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon[]> GetAllDaemonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStatsLogs", ReplyAction="http://tempuri.org/IService1/GetAllStatsLogsResponse")]
        BackupAdmin.ServerReference.tbLog[] GetAllStatsLogs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStatsLogs", ReplyAction="http://tempuri.org/IService1/GetAllStatsLogsResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbLog[]> GetAllStatsLogsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadTaskReference", ReplyAction="http://tempuri.org/IService1/UploadTaskReferenceResponse")]
        int UploadTaskReference(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadTaskReference", ReplyAction="http://tempuri.org/IService1/UploadTaskReferenceResponse")]
        System.Threading.Tasks.Task<int> UploadTaskReferenceAsync(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDaemonById", ReplyAction="http://tempuri.org/IService1/GetDaemonByIdResponse")]
        BackupAdmin.ServerReference.tbDaemon GetDaemonById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDaemonById", ReplyAction="http://tempuri.org/IService1/GetDaemonByIdResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon> GetDaemonByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTask", ReplyAction="http://tempuri.org/IService1/DeleteTaskResponse")]
        void DeleteTask(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTask", ReplyAction="http://tempuri.org/IService1/DeleteTaskResponse")]
        System.Threading.Tasks.Task DeleteTaskAsync(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteDestination", ReplyAction="http://tempuri.org/IService1/DeleteDestinationResponse")]
        void DeleteDestination(BackupAdmin.ServerReference.tbDestination d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteDestination", ReplyAction="http://tempuri.org/IService1/DeleteDestinationResponse")]
        System.Threading.Tasks.Task DeleteDestinationAsync(BackupAdmin.ServerReference.tbDestination d);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AutoDeleteTask", ReplyAction="http://tempuri.org/IService1/AutoDeleteTaskResponse")]
        void AutoDeleteTask(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AutoDeleteTask", ReplyAction="http://tempuri.org/IService1/AutoDeleteTaskResponse")]
        System.Threading.Tasks.Task AutoDeleteTaskAsync(BackupAdmin.ServerReference.tbTask t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDaemon", ReplyAction="http://tempuri.org/IService1/GetDaemonResponse")]
        BackupAdmin.ServerReference.tbDaemon GetDaemon(BackupAdmin.ServerReference.tbDaemon o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDaemon", ReplyAction="http://tempuri.org/IService1/GetDaemonResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon> GetDaemonAsync(BackupAdmin.ServerReference.tbDaemon o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        BackupAdmin.ServerReference.CompositeType GetDataUsingDataContract(BackupAdmin.ServerReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<BackupAdmin.ServerReference.CompositeType> GetDataUsingDataContractAsync(BackupAdmin.ServerReference.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : BackupAdmin.ServerReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<BackupAdmin.ServerReference.IService1>, BackupAdmin.ServerReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UploadString(string s) {
            base.Channel.UploadString(s);
        }
        
        public System.Threading.Tasks.Task UploadStringAsync(string s) {
            return base.Channel.UploadStringAsync(s);
        }
        
        public void UploadDaemon(BackupAdmin.ServerReference.tbDaemon o) {
            base.Channel.UploadDaemon(o);
        }
        
        public System.Threading.Tasks.Task UploadDaemonAsync(BackupAdmin.ServerReference.tbDaemon o) {
            return base.Channel.UploadDaemonAsync(o);
        }
        
        public void UploadDestination(BackupAdmin.ServerReference.tbDestination d) {
            base.Channel.UploadDestination(d);
        }
        
        public System.Threading.Tasks.Task UploadDestinationAsync(BackupAdmin.ServerReference.tbDestination d) {
            return base.Channel.UploadDestinationAsync(d);
        }
        
        public void UploadLog(BackupAdmin.ServerReference.tbLog l) {
            base.Channel.UploadLog(l);
        }
        
        public System.Threading.Tasks.Task UploadLogAsync(BackupAdmin.ServerReference.tbLog l) {
            return base.Channel.UploadLogAsync(l);
        }
        
        public void UploadTask(BackupAdmin.ServerReference.tbTask t) {
            base.Channel.UploadTask(t);
        }
        
        public System.Threading.Tasks.Task UploadTaskAsync(BackupAdmin.ServerReference.tbTask t) {
            return base.Channel.UploadTaskAsync(t);
        }
        
        public int UploadDaemonReference(BackupAdmin.ServerReference.tbDaemon o) {
            return base.Channel.UploadDaemonReference(o);
        }
        
        public System.Threading.Tasks.Task<int> UploadDaemonReferenceAsync(BackupAdmin.ServerReference.tbDaemon o) {
            return base.Channel.UploadDaemonReferenceAsync(o);
        }
        
        public void UpdateDaemonLastActive(int id) {
            base.Channel.UpdateDaemonLastActive(id);
        }
        
        public System.Threading.Tasks.Task UpdateDaemonLastActiveAsync(int id) {
            return base.Channel.UpdateDaemonLastActiveAsync(id);
        }
        
        public bool CheckDeamonReference(int id) {
            return base.Channel.CheckDeamonReference(id);
        }
        
        public System.Threading.Tasks.Task<bool> CheckDeamonReferenceAsync(int id) {
            return base.Channel.CheckDeamonReferenceAsync(id);
        }
        
        public bool DaemonReferenceOutdated(int id, BackupAdmin.ServerReference.tbDaemon d) {
            return base.Channel.DaemonReferenceOutdated(id, d);
        }
        
        public System.Threading.Tasks.Task<bool> DaemonReferenceOutdatedAsync(int id, BackupAdmin.ServerReference.tbDaemon d) {
            return base.Channel.DaemonReferenceOutdatedAsync(id, d);
        }
        
        public void UpdateDeamonReferenceUpload(BackupAdmin.ServerReference.tbDaemon d) {
            base.Channel.UpdateDeamonReferenceUpload(d);
        }
        
        public System.Threading.Tasks.Task UpdateDeamonReferenceUploadAsync(BackupAdmin.ServerReference.tbDaemon d) {
            return base.Channel.UpdateDeamonReferenceUploadAsync(d);
        }
        
        public BackupAdmin.ServerReference.tbDaemon UpdateDeamonReferenceGet(int id) {
            return base.Channel.UpdateDeamonReferenceGet(id);
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon> UpdateDeamonReferenceGetAsync(int id) {
            return base.Channel.UpdateDeamonReferenceGetAsync(id);
        }
        
        public BackupAdmin.ServerReference.tbDestination[] FindDestinationByTaskId(int id) {
            return base.Channel.FindDestinationByTaskId(id);
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDestination[]> FindDestinationByTaskIdAsync(int id) {
            return base.Channel.FindDestinationByTaskIdAsync(id);
        }
        
        public BackupAdmin.ServerReference.tbTask[] FindTaskByDestinationId(int id) {
            return base.Channel.FindTaskByDestinationId(id);
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbTask[]> FindTaskByDestinationIdAsync(int id) {
            return base.Channel.FindTaskByDestinationIdAsync(id);
        }
        
        public bool ExistDeamonTask(int id) {
            return base.Channel.ExistDeamonTask(id);
        }
        
        public System.Threading.Tasks.Task<bool> ExistDeamonTaskAsync(int id) {
            return base.Channel.ExistDeamonTaskAsync(id);
        }
        
        public BackupAdmin.ServerReference.tbTask[] GetDeamonTask(int id) {
            return base.Channel.GetDeamonTask(id);
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbTask[]> GetDeamonTaskAsync(int id) {
            return base.Channel.GetDeamonTaskAsync(id);
        }
        
        public void NewLogMessage(int DaemonId, string message) {
            base.Channel.NewLogMessage(DaemonId, message);
        }
        
        public System.Threading.Tasks.Task NewLogMessageAsync(int DaemonId, string message) {
            return base.Channel.NewLogMessageAsync(DaemonId, message);
        }
        
        public void UpdateTaskFinished(int id, bool finished) {
            base.Channel.UpdateTaskFinished(id, finished);
        }
        
        public System.Threading.Tasks.Task UpdateTaskFinishedAsync(int id, bool finished) {
            return base.Channel.UpdateTaskFinishedAsync(id, finished);
        }
        
        public void UpdateTaskRefrence(int id, BackupAdmin.ServerReference.tbTask t) {
            base.Channel.UpdateTaskRefrence(id, t);
        }
        
        public System.Threading.Tasks.Task UpdateTaskRefrenceAsync(int id, BackupAdmin.ServerReference.tbTask t) {
            return base.Channel.UpdateTaskRefrenceAsync(id, t);
        }
        
        public void UpdateTaskLastCommit(int id) {
            base.Channel.UpdateTaskLastCommit(id);
        }
        
        public System.Threading.Tasks.Task UpdateTaskLastCommitAsync(int id) {
            return base.Channel.UpdateTaskLastCommitAsync(id);
        }
        
        public BackupAdmin.ServerReference.tbDestination[] GetAllDestinations() {
            return base.Channel.GetAllDestinations();
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDestination[]> GetAllDestinationsAsync() {
            return base.Channel.GetAllDestinationsAsync();
        }
        
        public BackupAdmin.ServerReference.tbDaemon[] GetAllDaemons() {
            return base.Channel.GetAllDaemons();
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon[]> GetAllDaemonsAsync() {
            return base.Channel.GetAllDaemonsAsync();
        }
        
        public BackupAdmin.ServerReference.tbLog[] GetAllStatsLogs() {
            return base.Channel.GetAllStatsLogs();
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbLog[]> GetAllStatsLogsAsync() {
            return base.Channel.GetAllStatsLogsAsync();
        }
        
        public int UploadTaskReference(BackupAdmin.ServerReference.tbTask t) {
            return base.Channel.UploadTaskReference(t);
        }
        
        public System.Threading.Tasks.Task<int> UploadTaskReferenceAsync(BackupAdmin.ServerReference.tbTask t) {
            return base.Channel.UploadTaskReferenceAsync(t);
        }
        
        public BackupAdmin.ServerReference.tbDaemon GetDaemonById(int id) {
            return base.Channel.GetDaemonById(id);
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon> GetDaemonByIdAsync(int id) {
            return base.Channel.GetDaemonByIdAsync(id);
        }
        
        public void DeleteTask(BackupAdmin.ServerReference.tbTask t) {
            base.Channel.DeleteTask(t);
        }
        
        public System.Threading.Tasks.Task DeleteTaskAsync(BackupAdmin.ServerReference.tbTask t) {
            return base.Channel.DeleteTaskAsync(t);
        }
        
        public void DeleteDestination(BackupAdmin.ServerReference.tbDestination d) {
            base.Channel.DeleteDestination(d);
        }
        
        public System.Threading.Tasks.Task DeleteDestinationAsync(BackupAdmin.ServerReference.tbDestination d) {
            return base.Channel.DeleteDestinationAsync(d);
        }
        
        public void AutoDeleteTask(BackupAdmin.ServerReference.tbTask t) {
            base.Channel.AutoDeleteTask(t);
        }
        
        public System.Threading.Tasks.Task AutoDeleteTaskAsync(BackupAdmin.ServerReference.tbTask t) {
            return base.Channel.AutoDeleteTaskAsync(t);
        }
        
        public BackupAdmin.ServerReference.tbDaemon GetDaemon(BackupAdmin.ServerReference.tbDaemon o) {
            return base.Channel.GetDaemon(o);
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.tbDaemon> GetDaemonAsync(BackupAdmin.ServerReference.tbDaemon o) {
            return base.Channel.GetDaemonAsync(o);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public BackupAdmin.ServerReference.CompositeType GetDataUsingDataContract(BackupAdmin.ServerReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<BackupAdmin.ServerReference.CompositeType> GetDataUsingDataContractAsync(BackupAdmin.ServerReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
